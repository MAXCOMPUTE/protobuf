syntax = "proto3";

package foo;

message TestMessage {
  // Singular
  int32 optional_int32 = 1;
  int64 optional_int64 = 2;
  uint32 optional_uint32 = 3;
  uint64 optional_uint64 = 4;
  sint32 optional_sint32 = 5;
  sint64 optional_sint64 = 6;
  fixed32 optional_fixed32 = 7;
  fixed64 optional_fixed64 = 8;
  sfixed32 optional_sfixed32 = 9;
  sfixed64 optional_sfixed64 = 10;
  float optional_float = 11;
  double optional_double = 12;
  bool optional_bool = 13;
  string optional_string = 14;
  bytes optional_bytes = 15;

  Sub optional_message = 17;

  // Repeated
  repeated    int32 repeated_int32    = 31;
  repeated    int64 repeated_int64    = 32;
  repeated   uint32 repeated_uint32   = 33;
  repeated   uint64 repeated_uint64   = 34;
  repeated   sint32 repeated_sint32   = 35;
  repeated   sint64 repeated_sint64   = 36;
  repeated  fixed32 repeated_fixed32  = 37;
  repeated  fixed64 repeated_fixed64  = 38;
  repeated sfixed32 repeated_sfixed32 = 39;
  repeated sfixed64 repeated_sfixed64 = 40;
  repeated    float repeated_float    = 41;
  repeated   double repeated_double   = 42;
  repeated     bool repeated_bool     = 43;
  repeated   string repeated_string   = 44;
  repeated    bytes repeated_bytes    = 45;

//   repeated TestEnum repeated_enum = 46;
  repeated Sub repeated_message = 47;

//   // Map
//   map<int32,       int32> map_int32_int32       = 71;
//   map<int64,       int64> map_int64_int64       = 72;
//   map<uint32,     uint32> map_uint32_uint32     = 73;
//   map<uint64,     uint64> map_uint64_uint64     = 74;
//   map<sint32,     sint32> map_sint32_sint32     = 75;
//   map<sint64,     sint64> map_sint64_sint64     = 76;
//   map<fixed32,   fixed32> map_fixed32_fixed32   = 77;
//   map<fixed64,   fixed64> map_fixed64_fixed64   = 78;
//   map<sfixed32, sfixed32> map_sfixed32_sfixed32 = 79;
//   map<sfixed64, sfixed64> map_sfixed64_sfixed64 = 80;
//   map<int32,       float> map_int32_float       = 81;
//   map<int32,      double> map_int32_double      = 82;
//   map<bool,         bool> map_bool_bool         = 83;
//   map<string,     string> map_string_string     = 84;
//   map<int32,       bytes> map_int32_bytes       = 85;
//   // map<int32,    TestEnum> map_int32_enum        = 86;
//   map<int32,         Sub> map_int32_message     = 87;

  message Sub {
    int32 a = 1;
  }
}
