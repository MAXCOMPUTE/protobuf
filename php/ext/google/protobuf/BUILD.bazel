# Protobuf PHP extension (PECL)

load("@rules_pkg//:mappings.bzl", "pkg_files", "pkg_filegroup")
load("//:protobuf_version.bzl", "PROTOBUF_PHP_VERSION")
load("@rules_pkg//:pkg.bzl", "pkg_tar")

package(default_visibility = ["//php:__subpackages__"])

pkg_files(
  name = "utf8_range_files",
  srcs = [
    "//third_party/utf8_range:utf8_range_srcs",
  ],
  prefix = "third_party/utf8_range",
)

pkg_files(
  name = "source_files",
  srcs = glob([
    "*.h",
    "*.c",
  ]) + [
    "//:LICENSE",
    "config.m4",
    "wkt.inc",
  ],
)

pkg_filegroup(
  name = "release_files",
  srcs = [
    ":source_files",
    ":utf8_range_files",
  ],
  prefix = "protobuf-%s" % PROTOBUF_PHP_VERSION,
)

# PECL .tgz without package.xml
pkg_tar(
  name = "release_without_package",
  extension = "tgz",
  srcs = [
    ":release_files",
  ],
  out = "release_without_package.tgz",
)

# Generate PECL package.xml
genrule(
    name = "generate_package_xml",
    srcs = [
      ":release_without_package",
      "template_package.xml",
    ],
    outs = ["package.xml"],
    cmd = " ".join([
      "$(location :generate_package_xml.sh)",
      "$(location template_package.xml)",
      PROTOBUF_PHP_VERSION,
      "$$(tar -tf $(location :release_without_package) | sed -z -e 's;\\n;,;g')",
      "$(location package.xml)"
    ]),
    tools = ["generate_package_xml.sh"],
)
