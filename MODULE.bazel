# TODO: migrate all dependencies from WORKSPACE to MODULE.bazel
# https://github.com/protocolbuffers/protobuf/issues/14313
module(
    name = "protobuf",
    version = "",
    repo_name = "com_google_protobuf",
)

bazel_dep(name = "abseil-cpp", version = "20230802.0.bcr.1", repo_name = "com_google_absl")
bazel_dep(name = "bazel_skylib", version = "1.0.3")

bazel_dep(name = "google_benchmark", version = "1.8.3", dev_dependency = True)
bazel_dep(name = "googletest", version = "1.14.0", dev_dependency = True, repo_name = "com_google_googletest")

bazel_dep(name = "platforms", version = "0.0.8")
bazel_dep(name = "rules_apple", version = "3.1.1", repo_name = "build_bazel_rules_apple")
bazel_dep(name = "rules_cc", version = "0.0.9")
bazel_dep(name = "rules_java", version = "4.0.0")
bazel_dep(name = "rules_jvm_external", version = "4.4.2")
bazel_dep(name = "rules_kotlin", version = "1.9.0", repo_name = "rules_kotlin")
bazel_dep(name = "rules_proto", version = "5.3.0-21.7")
bazel_dep(name = "rules_pkg", version = "0.7.0")
bazel_dep(name = "rules_python", version = "0.26.0")
bazel_dep(name = "rules_ruby", version = "0.6.0")
bazel_dep(name = "rules_rust", version = "0.35.0")
bazel_dep(name = "upb", version = "0.0.0-20230516-61a97ef")
bazel_dep(name = "zlib", version = "1.2.11")
# -- bazel_dep definitions -- #

local_path_override(
    module_name = "com_google_protobuf_examples",
    path = "examples",
)

non_module_deps = use_extension("//:non_module_deps.bzl", "non_module_deps")
use_repo(non_module_deps, "jsoncpp", "lua", "rules_fuzzing", "utf8_range")

maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")
maven.install(
    name = "maven",
    artifacts = [
        "com.google.caliper:caliper:1.0-beta-3",
        "com.google.code.findbugs:jsr305:3.0.2",
        "com.google.code.gson:gson:2.8.9",
        "com.google.errorprone:error_prone_annotations:2.5.1",
        "com.google.j2objc:j2objc-annotations:2.8",
        "com.google.guava:guava:32.0.1-jre",
        "com.google.guava:guava-testlib:32.0.1-jre",
        "com.google.truth:truth:1.1.2",
        "junit:junit:4.13.2",
        "org.mockito:mockito-core:4.3.1",
        "biz.aQute.bnd:biz.aQute.bndlib:6.4.0",
        "info.picocli:picocli:4.6.3",
    ],
    lock_file = "//:maven_install.json",
    repositories = [
        "https://repo1.maven.org/maven2",
        "https://repo.maven.apache.org/maven2",
    ],
)
use_repo(maven, "maven", "unpinned_maven")

SUPPORTED_RUBY_VERSIONS = [
    "jruby-9.2",
    "jruby-9.3",
]

ruby = use_extension("@rules_ruby//ruby:extensions.bzl", "ruby")

[
    ruby.toolchain(
        name = "ruby",
        version = ruby_version,
    )
    for ruby_version in SUPPORTED_RUBY_VERSIONS
]

use_repo(ruby, "ruby")
ruby.bundle_fetch(
    name = "protobuf_bundle",
    srcs = ["//ruby:google-protobuf.gemspec"],
    gemfile = "//ruby:Gemfile",
)
use_repo(ruby, "protobuf_bundle", "ruby_toolchains")

register_toolchains("@ruby_toolchains//:all")

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "pip_deps",
    requirements = "//python:requirements.txt",
)
use_repo(pip, "pip")

rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(
    edition = "2021",
    versions = ["1.70.2"],
)
use_repo(rust, "rust_toolchains")

register_toolchains("@rust_toolchains//:all")

crate = use_extension("@rules_rust//crate_universe:extension.bzl", "crate")
crate.from_cargo(
    name = "crates",
    cargo_lockfile = "//:Cargo.lock",
)
use_repo(crate, "crates")
