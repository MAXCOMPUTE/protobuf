/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.protobuf.kotlin.generator

import com.google.protobuf.Descriptors.Descriptor
import com.google.protobuf.kotlin.protoc.Declarations
import com.google.protobuf.kotlin.protoc.GeneratorConfig
import com.google.protobuf.kotlin.protoc.Scope

/**
 * A strategy for generating Kotlin augmentations atop the existing Java code for a message,
 * given its descriptor.
 */
abstract class ExtensionGenerator {
  /**
   * Generate extensions for the specified message, specifically excluding any sub-messages, as
   * a set of [Declarations].
   *
   * @param descriptor The message to generate extensions for.
   * @param enclosingScope The scope containing extensions for this message type.
   * @param extensionScope The scope of the extension object for this message type.
   */
  abstract fun GeneratorConfig.shallowExtensions(
    descriptor: Descriptor,
    enclosingScope: Scope,
    extensionScope: Scope
  ): Declarations

  /**
   * True if we should generate this code inside the extension object.  False if we should generate
   * it as a peer of the extension object, at the same level.
   */
  open val generateWithinExtensionClass: Boolean
    get() = true

  /**
   * The scope in which this extension generator generates its APIs. Can be useful for cross-
   * referencing APIs generated by one generator in another.
   */
  fun scope(enclosingScope: Scope, extensionScope: Scope): Scope =
    if (generateWithinExtensionClass) extensionScope else enclosingScope
}
