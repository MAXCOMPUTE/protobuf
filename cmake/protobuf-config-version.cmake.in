set(PACKAGE_VERSION @protobuf_VERSION@)

# Implement rough Sematic Versioning rules - Major versions must match, minor, patch and tweak
# versionsmust be greater, and a version with no tweak(prerelease) beats equal versions with one.

# To allow matching of prerelease versions in find_package, users must specify a tweak version
# greater than 0

set(PACKAGE_VERSION_COMPATIBLE TRUE) #Assume true until shown otherwise

if(PACKAGE_FIND_VERSION STREQUAL PACKAGE_VERSION)
  set(PACKAGE_VERSION_EXACT TRUE)
elseif(NOT PACKAGE_FIND_VERSION_MAJOR EQUAL "@protobuf_VERSION_MAJOR@")
  set(PACKAGE_VERSION_COMPATIBLE FALSE)
elseif(PACKAGE_FIND_VERSION_MINOR GREATER "@protobuf_VERSION_MINOR@")
  set(PACKAGE_VERSION_COMPATIBLE FALSE)
elseif(PACKAGE_FIND_VERSION_PATCH GREATER "@protobuf_VERSION_PATCH@")
  set(PACKAGE_VERSION_COMPATIBLE FALSE)
elseif(("@protobuf_VERSION_TWEAK@" AND NOT PACKAGE_FIND_VERSION_TWEAK) OR
       (PACKAGE_FIND_VERSION_TWEAK GREATER "@protobuf_VERSION_TWEAK@"))
  set(PACKAGE_VERSION_COMPATIBLE FALSE)
endif()

# if the installed or the using project don't have CMAKE_SIZEOF_VOID_P set, ignore it:
if("${CMAKE_SIZEOF_VOID_P}" STREQUAL "" OR "@CMAKE_SIZEOF_VOID_P@" STREQUAL "")
   return()
endif()

# check that the installed version has the same 32/64bit-ness as the one which is currently searching:
if(NOT CMAKE_SIZEOF_VOID_P STREQUAL "@CMAKE_SIZEOF_VOID_P@")
  math(EXPR installedBits "@CMAKE_SIZEOF_VOID_P@ * 8")
  set(PACKAGE_VERSION "${PACKAGE_VERSION} (${installedBits}bit)")
  set(PACKAGE_VERSION_UNSUITABLE TRUE)
endif()
