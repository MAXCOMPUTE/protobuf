require "rubygems"
require "rubygems/package_task"
require "rake/testtask"
require "ffi-compiler/compile_task"

spec = Gem::Specification.load("google-protobuf.gemspec")

well_known_protos = %w[
  google/protobuf/any.proto
  google/protobuf/api.proto
  google/protobuf/descriptor.proto
  google/protobuf/duration.proto
  google/protobuf/empty.proto
  google/protobuf/field_mask.proto
  google/protobuf/source_context.proto
  google/protobuf/struct.proto
  google/protobuf/timestamp.proto
  google/protobuf/type.proto
  google/protobuf/wrappers.proto
]

test_protos = %w[
  tests/basic_test.proto
  tests/basic_test_proto2.proto
  tests/generated_code.proto
  tests/generated_code_proto2.proto
  tests/multi_level_nesting_test.proto
  tests/test_import.proto
  tests/test_import_proto2.proto
  tests/test_ruby_package.proto
  tests/test_ruby_package_proto2.proto
]

# These are omitted for now because we don't support proto2.
proto2_protos = %w[
  google/protobuf/descriptor.proto
  google/protobuf/compiler/plugin.proto
]

if !ENV['PROTOC'].nil?
  protoc_command = ENV['PROTOC']
elsif system('../bazel-bin/protoc --version')
  protoc_command = '../bazel-bin/protoc'
else
  protoc_command = 'protoc'
end

genproto_output = []

# We won't have access to .. from within docker, but the proto files
# will be there, thanks to the :genproto rule dependency for gem:native.
unless ENV['IN_DOCKER'] == 'true' or ENV['BAZEL'] == 'true'
  well_known_protos.each do |proto_file|
    input_file = "../src/" + proto_file
    output_file = "lib/" + proto_file.sub(/\.proto$/, "_pb.rb")
    genproto_output << output_file
    file output_file => input_file do |file_task|
      sh "#{protoc_command} -I../src --ruby_out=lib #{input_file}"
    end
  end

  test_protos.each do |proto_file|
    output_file = proto_file.sub(/\.proto$/, "_pb.rb")
    genproto_output << output_file
    file output_file => proto_file do |file_task|
      sh "#{protoc_command} -I../src -I. -I./tests --ruby_out=.  #{proto_file}"
    end
  end
end

task :copy_third_party do
  # We need utf8_range in-tree.
  unless File.exist? 'ext/google/protobuf_c/third_party/utf8_range'
    FileUtils.mkdir_p("ext/google/protobuf_c/third_party/utf8_range")
    FileUtils.cp("../third_party/utf8_range/utf8_range.h", "ext/google/protobuf_c/third_party/utf8_range")
    FileUtils.cp("../third_party/utf8_range/naive.c", "ext/google/protobuf_c/third_party/utf8_range")
    FileUtils.cp("../third_party/utf8_range/range2-neon.c", "ext/google/protobuf_c/third_party/utf8_range")
    FileUtils.cp("../third_party/utf8_range/range2-sse.c", "ext/google/protobuf_c/third_party/utf8_range")
    FileUtils.cp("../third_party/utf8_range/LICENSE", "ext/google/protobuf_c/third_party/utf8_range")
  end
end

# FFI::CompilerTask's constructor walks the filesystem at initialization time
# in order to create subtasks for each source file, so the files from third_party
# must be copied into place before the task is defined.
ffi_compiler_config_block = Proc.new do |c|
  c.cflags << "-std=gnu99 -O3 -DNDEBUG"
  if RbConfig::CONFIG['target_os'] =~ /darwin|linux/
    # c.cflags << "-fvisibility=hidden -Wall -Wsign-compare -Wno-declaration-after-statement"
    c.cflags << "-Wall -Wsign-compare -Wno-declaration-after-statement"
  end
  if RbConfig::CONFIG['target_os'] =~ /linux/
    # Instruct the linker to point memcpy calls at our __wrap_memcpy wrapper.
    c.ldflags << "-Wl,-wrap,memcpy"
  end
end

if File.exist? 'ext/google/protobuf_c/third_party/utf8_range'
  desc "compiler tasks"
  namespace "ffi-compiler" do
    FFI::Compiler::CompileTask.new('ext/google/protobuf_c', &ffi_compiler_config_block)
  end
else
  task "ffi-compiler:default" do
    Rake::Task[:copy_third_party].invoke
    desc "compiler tasks"
    namespace "ffi-compiler" do
      FFI::Compiler::CompileTask.new('ext/google/protobuf_c', &ffi_compiler_config_block)
      Rake::Task[Rake::Task[:default].prereqs.first].invoke
    end
  end
end

task :compile => ["ffi-compiler:default"]

task :genproto => genproto_output

task :clean do
  sh "rm -f #{genproto_output.join(' ')}"
  sh "rm -rf `find ext/google/protobuf_c/* -maxdepth 0 -type d`"
  sh "rm -rf pkg"
end

Gem::PackageTask.new(spec) do |pkg|
end

# Skip build/genproto in Bazel builds, where we expect this to
# be done already.
Rake::TestTask.new(:test => ENV['BAZEL'] == 'true' ? [] : [:build, :genproto]) do |t|
  t.test_files = FileList["tests/*.rb"].exclude("tests/gc_test.rb", "tests/common_tests.rb")
end

# gc_test needs to be split out to ensure the generated file hasn't been
# imported by other tests.
Rake::TestTask.new(:gc_test => ENV['BAZEL'] == 'true' ? [] : :build) do |t|
  t.test_files = FileList["tests/gc_test.rb"]
end

Rake::Task[:gem].prereqs.unshift(:clean, :genproto, :copy_third_party)
task :build => :compile
task :default => [:build]

# vim:sw=2:et
