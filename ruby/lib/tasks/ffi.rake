require "ffi-compiler/compile_task"

# # @param task [FFI::Compiler::CompileTask] task to configure
def configure_common_compile_task(task)
  task.add_include_path 'third_party'
  task.add_include_path 'ext/google/protobuf_c/third_party'
  task.add_define 'NDEBUG'
  task.cflags << "-std=gnu99 -O3"
  [
    :convert, :defs, :map, :message, :protobuf, :repeated_field, :wrap_memcpy
  ].each { |file| task.exclude << "/#{file}.c" }
  task.ext_dir = File.dirname('.')
  task.source_dirs = [task.ext_dir]
  if RbConfig::CONFIG['target_os'] =~ /darwin|linux/
    task.cflags << "-Wall -Wsign-compare -Wno-declaration-after-statement"
  end
end

# FFI::CompilerTask's constructor walks the filesystem at task definition time
# to create subtasks for each source file, so files from third_party must be
# copied into place before the task is defined for it to work correctly.
# TODO(jatl) Is there a sane way to check for generated protos under lib too?
def with_generated_files
  path_prefix # defined by Rakefile that includes this file.
  if File.exist?('ext/google/protobuf_c/third_party') or File.exist?('third_party')
    yield
  else
    task :default do
      raise "Missing directory #{File.absolute_path('third_party')} and " +
              "#{File.absolute_path('ext/google/protobuf_c/third_party')}." +
              " Did you forget to run `rake copy_third_party` before building" +
              " native extensions?"
    end
  end
end

# Compile Ruby UPB separately in order to limit use of -DUPB_BUILD_API to one
# compilation unit.
desc "Compile UPB library for FFI"
namespace "ffi-upb" do
  with_generated_files do
    FFI::Compiler::CompileTask.new('ruby-upb') do |c|
      configure_common_compile_task c
      c.add_define "UPB_BUILD_API"
      c.exclude << "/glue.c"
      c.exclude << "/shared_message.c"
      c.exclude << "/shared_convert.c"
      if RbConfig::CONFIG['target_os'] =~ /darwin|linux/
        c.cflags << "-fvisibility=hidden"
      end
    end
  end
end

desc "Compile Protobuf library for FFI"
namespace "ffi-protobuf" do
  with_generated_files do
    FFI::Compiler::CompileTask.new 'ext/google/protobuf_c_ffi' do |c|
      configure_common_compile_task c
      # Ruby UPB was already compiled with different flags.
      c.exclude << "/range2-neon.c"
      c.exclude << "/range2-sse.c"
      c.exclude << "/naive.c"
      c.exclude << "/ruby-upb.c"
    end

    # Setup dependencies so that the .o files generated by building ffi-upb are
    # available to link here.
    # TODO(jatl) Can this be simplified? Can the shared libraries be used instead?
    protobuf_c_task = Rake::Task[:"ffi-protobuf:default"]
    protobuf_c_shared_lib_task = Rake::Task[protobuf_c_task.prereqs.first]
    ruby_upb_shared_lib_task = Rake::Task[:"ffi-upb:default"].prereqs.first
    Rake::Task[ruby_upb_shared_lib_task].prereqs.each do |dependency|
      protobuf_c_shared_lib_task.prereqs.prepend dependency
    end
  end
end

